#Postgres notes:
---------------
    - Postgres is an open-source relational database management system (RDBMS).
    - It is known for its robustness, extensibility, and compliance with SQL standards.
    - Postgres supports advanced data types and performance optimization features.
    - It is commonly used for web applications, data warehousing, and analytics.
    - Postgres supports ACID (Atomicity, Consistency, Isolation, Durability) properties, ensuring reliable transactions.
    - It has a strong community and a wide range of extensions available.
    - Postgres supports various programming languages, including Python, Java, and C.
    - Postgres can be deployed on various platforms, including cloud services and on-premises servers.
    - It supports JSON and XML data types, making it suitable for modern applications.
# Postgres commands:
---------------------
    - Postgres commands are executed using the PostgreSQL command-line interface (psql).
    - `psql`: Command-line tool to interact with the Postgres database.
    - `CREATE DATABASE`: Command to create a new database.
    - `CREATE TABLE`: Command to create a new table within a database.
    - `INSERT`: Command to add new data to a table.
    - `SELECT`: Command to query data from a table.
    - `UPDATE`: Command to modify existing data in a table.
    - `DELETE`: Command to remove data from a table.
    - `ALTER TABLE`: Command to modify the structure of an existing table.
    - `DROP DATABASE`: Command to delete a database and all its tables.
    - `DROP TABLE`: Command to delete a table from a database.
    - `TRUNCATE`: Command to remove all data from a table without deleting the table.
    - `\c`: Command to connect to a specific database.
    - `\dt`: Command to list all tables in the current database.
    - `\d`: Command to describe the structure of a table.
    - `\l`: Command to list all databases.
# Postgres commands with syntax and example:
-------------------------------------------------
    - `psql`: Launch the PostgreSQL command-line interface.
      Example: `psql -U username -d database_name` # Connect to a specific Postgres database.
    - `\c`: Connect to a specific database.
      Example: `\c my_database;`  
    - connect to remote database: `psql -h hostname -U username -d database_name`
    - `\dt`: List all tables in the current database.
      Example: `\dt;`
    - `CREATE DATABASE`: Create a new database.
      Example: `CREATE DATABASE my_database;`
    - `CREATE TABLE`: Create a new table within a database.
      Example: 
      ```
      CREATE TABLE users (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100),
          email VARCHAR(100) UNIQUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      ```
    - `INSERT`: Add new data to a table.
      Example: `INSERT INTO users (name, email) VALUES ('John Doe', 'john.doe@example.com');`
    - `SELECT`: Query data from a table.
      Example: `SELECT * FROM users;`
    - `UPDATE`: Modify existing data in a table.
      Example: `UPDATE users SET email = 'john.new@example.com' WHERE id = 1;`  
    - `DELETE`: Remove data from a table.
      Example: `DELETE FROM users WHERE id = 1;`    
    - `ALTER TABLE`: Modify the structure of an existing table.
      Example: `ALTER TABLE users ADD COLUMN age INT;`  
    - `DROP DATABASE`: Delete a database and all its tables.
      Example: `DROP DATABASE my_database;` 
    - `DROP TABLE`: Delete a table from a database.
      Example: `DROP TABLE users;`  
    - `TRUNCATE`: Remove all data from a table without deleting the table.
      Example: `TRUNCATE TABLE users;`  
    - `\c`: Connect to a specific database.
      Example: `\c my_database;`    
    - `\dt`: List all tables in the current database.
      Example: `\dt;`
    - `\d`: Describe the structure of a table.  
        Example: `\d users;`    
    - `\l`: List all databases.
      Example: `\l;`    
    - list all users: `\du;`  
      Example: `\du;`
    - show databse : `\l+`  
      Example: `\l+;`
# Postgres backup and recovery:
-----------------------------
    - Postgres supports various backup and recovery methods, including:
      - SQL dump: Using `pg_dump` to create a logical backup of the database.
      - File system backup: Copying the data directory while the database is offline.
      - Continuous archiving: Using Write-Ahead Logging (WAL) for point-in-time recovery.
    - Barman (Backup and Recovery Manager) is a popular tool for managing Postgres backups.
    - It supports incremental backups, retention policies, and monitoring.
    - Barman can store backups on local or remote storage, including S3.    
                                                  